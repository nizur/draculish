/* TODO: Need a light-themed CodeMirror theme */
/*
==================================================
CODEMIRROR & INLINE CODE
==================================================
*/

:not(pre) > code,
code, kbd, pre, samp, .CodeMirror {
    background: var(--cm-background-color);
    font: {
        family: 'JetBrains Mono', monospace !important;
        size: 12px;
        variant: contextual slashed-zero;
    }
    line-height: 1.2rem;
}

:not(pre) > code {
    background: var(--ls-quarternary-background-color);
    color: var(--ls-active-secondary-color);
}

.cm-s-default {
    * {
        color: var(--cm-base-text-color);
    }

    .CodeMirror, & .CodeMirror-gutters {
        background: transparent;
        border: none;
        color: var(--cm-gutter-text-color) !important;
    }

    .CodeMirror {
        border: 5px solid var(--cm-border-color);

        & pre.CodeMirror-line, & pre.CodeMirror-line-like {
            color: var(--cm-line-text-color);
        }
    }

    & .CodeMirror-cursor {
        border-left: solid thin var(--cm-cursor-color);
    }

    & .CodeMirror-linenumber {
        color: var(--cm-line-number-text-color);
    }

    & .CodeMirror-selected {
        background: var(--cm-selected-color);
    }

    & .CodeMirror-line {
        box-shadow: none;

        &::selection,
        & > span::selection,
        & > span > span::selection {
            background: var(--cm-selected-color);
        }
    }

    & span.cm-comment {
        color: var(--cm-comment-text-color);
        font-style: italic;
    }

    & span.cm-string,
    & span.cm-string-2 {
        color: var(--cm-string-text-color);
    }

    & span.cm-number {
        color: var(--cm-number-text-color);
    }

    & span.cm-variable {
        color: var(--cm-variable-1-text-color);
    }

    & span.cm-variable-2 {
        color: var(--cm-variable-2-text-color);
    }

    & span.cm-def {
        color: var(--cm-def-text-color);
    }

    & span.cm-operator {
        color: var(--cm-operator-text-color);
    }

    & span.cm-keyword {
        color: var(--cm-keyword-text-color);
    }

    & span.cm-atom {
        color: var(--cm-atom-text-color);
    }

    & span.cm-meta {
        color: var(--cm-meta-text-color);
    }

    & span.cm-tag {
        color: var(--cm-tag-text-color);
    }

    & span.cm-attribute {
        color: var(--cm-attribute-text-color);
    }

    & span.cm-qualifier {
        color: var(--cm-qualifier-text-color);
    }

    & span.cm-property {
        color: var(--cm-property-text-color);
    }

    & span.cm-builtin {
        color: var(--cm-builtin-text-color);
    }

    & span.cm-variable-3,
    & span.cm-type {
        color: var(--cm-variable-3-text-color);
    }

    & .CodeMirror-activeline-background {
        background: var(--cm-active-line-background-color);
    }

    & .CodeMirror-matchingbracket {
        color: var(--cm-matching-bracket-color) !important;
        text-decoration: underline;
    }
}

.extensions__code-lang {
    background: var(--cm-code-lang-background-color);
    color: var(--cm-code-lang-text-color);
}

#right-sidebar pre.CodeMirror-line {
    background: transparent;
}
